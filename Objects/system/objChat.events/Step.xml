<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if (!active) exit;

caretMove = max(0, caretMove - 1)
isDoubleCharOnLeftOfCaret =
    ord(string_copy(text, caret, 1)) &gt;= 128
isDoubleCharOnRightOfCaret =
    ord(string_copy(text, caret + 1, 1)) &gt;= 129

// Keyboard Events - Left &amp; Right
if (keyboard_check_pressed(vk_left)) {
    if (caret &gt; 1 &amp;&amp; isDoubleCharOnLeftOfCaret) {
        caret -= 2
    } else {
        caret -= 1
    }
    caretMove = 20
}
if (keyboard_check_pressed(vk_right)) {
    if (caret &lt; string_length(text) - 1 &amp;&amp; isDoubleCharOnRightOfCaret) {
        caret += 2
    } else {
        caret += 1
    }
    caretMove = 20
}

if (keyboard_check(vk_left) != keyboard_check(vk_right)) {
    if (caretMove == 0) {
        caretVisible = true
        alarm[0] = caretFlashRate
        if (keyboard_check(vk_left)) {
            if (caret &gt; 1 &amp;&amp; isDoubleCharOnLeftOfCaret) {
                caret -= 2
            } else {
                caret -= 1
            }
        } else {
            if (caret &lt; string_length(text) - 1 &amp;&amp; isDoubleCharOnRightOfCaret) {
                caret += 2
            } else {
                caret += 1
            }
        }
        caretMove = caretMoveRate
    }
} else {
    caretMove = 0
}

// Keyboard Events - Home &amp; End
if (keyboard_check_pressed(vk_home)) {
    caret = 0
}
if (keyboard_check_pressed(vk_end)) {
    caret = string_length(text)
}

// Keyboard Events - Delete
if (keyboard_check_pressed(vk_delete)) {
    if (isDoubleCharOnRightOfCaret) {
        text = string_delete(text, caret + 1, 2)
    } else {
        text = string_delete(text, caret + 1, 1)
    }
}

// Keyboard Events - Ctrl + V
if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord('V'))) {
    clipboardText = clipboard_get_text()
    singleLineText = string_replace_all(string_replace_all(clipboardText, chr(13), ' '), chr(10), ' ')
    text += singleLineText
    caret += string_length(singleLineText)
}

lastchar = ord(string_copy(text, caret, caret))

// Set max length
asciiChars = 0
for (i = 1; i &lt;= string_length(text); i += 1) {
    str = ord(string_char_at(text, i))
    if (str &lt; 128) {
        asciiChars += 1
    }
}
if (asciiChars mod 2 == 0) {
    maxLength = 60
} else {
    maxLength = 59
}

text = string_copy(text, 1, maxLength)

if (string_length(text) &lt; maxLength || (string_length(text) == maxLength &amp;&amp; keyboard_check(vk_backspace))) {
    // Handle input
    if (keyboard_string != filltext &amp;&amp; keyboard_string != "") {
        var n, l, t;
        t = keyboard_string
        l = string_length(t)
        n = 1
        // find where actual input starts
        while (n &lt;= l &amp;&amp; string_char_at(t, n) == fillchar) {
            n += 1
        }
        c = 11 - n
        if (c &gt; 0 &amp;&amp; caret &gt; 0) {
            caret -= c
            text = string_delete(text, caret + 1, c)
        }
        c = l - n + 1
        if (c &gt; 0) {
            text = string_insert(string_copy(t, n, c), text, caret + 1)
            caret += c
        }
    }
}

text = string_copy(text, 1, maxLength)

// Keyboard Events - Backspace
// This event is still buggy when you hold backspace.
if (keyboard_check(vk_backspace) &amp;&amp; lastchar &gt;= 128 &amp;&amp; string_length(text) != lastlen) {
    if (ord(string_copy(text, caret, 1)) &gt;= 128) {
        text = string_delete(text, caret, 1)
        caret = max(0, min(caret - 1, string_length(text)))
        lastchar = ord(string_copy(text, caret, caret))
    }
}


keyboard_string = filltext
caret = max(0, min(caret, string_length(text)))

lastlen = string_length(text)

if (keyboard_check_pressed(vk_enter)) {
    if (text == '/clear') {
        for (i = 0; i &lt; length; i += 1) {
            objChatLog.text[i] = ""
        }
        objChatLog.length = 0
        text = ""
        caret = 0
        exit
    }
    // check for empty message
    isAllSpace = true
    for (i = 1; i &lt;= string_length(text); i += 1) {
        str = string_copy(text, i, 1)
        if (ord(str) &gt; 13 &amp;&amp; str != " ") {
            isAllSpace = false
            break
        }
    }
    // send the message
    if (!isAllSpace) {
        showPlaceholder = false
        // set the message scope
        if (ns_is_in_lobby()) {
            // send to players in the lobby
            scope = 'lobby'
        } else if (ns_is_in_game()) {
            scope = 'game'
            // send to players in the same game id
        } else {
            // send to all players
            scope = 'user'
        }
        cmd = cmd_init(
            'chat', 2, 
            'msg', text,
            'scope', scope
        )
        if (scope == 'lobby') {
            cmd = cmd_add(cmd, 1, 'lobbyId', ns_get_lobby_id())
        }
        ns_send(cmd)
        // show message instantly
        objChatLog.newText = text
        objChatLog.alarm[0] = 1
        // create message bubble
        if (instance_exists(player)) {
            bubble = instance_create(
                view_xview[view_current] - view_wview[view_current] / 2,
                view_yview[view_current] - view_hview[view_current] / 2,
                objChatBubble
            )
            bubble.parent = player
            bubble.text = text
        }
    }
    text = ""
    caret = 0
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
